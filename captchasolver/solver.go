package captchasolver

import (
	"encoding/base64"
	"encoding/json"
	"regexp"
	"sort"
	"strconv"
	"strings"
)

const (
	MODEL  string = ""
	LENGTH int    = 6
)

func getIndex(arr []int, n int) int {
	for i, num := range arr {
		if num == n {
			return i
		}
	}
	return -1
}

var parsedModel map[string]string
// The MODEL simply maps patterns to characters
// e.g. MLQQLQMLQMLQM -> v
// M,L,Q refer to path commands in SVG graphics
// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#path
// they specify where and how to draw lines and curves
// Each character has a unique pattern, which is why we can
// break the captcha this way
// this post explains how that's done in detail
// https://dev.to/sushrut111/decode-captcha-created-by-library-svg-captcha-5d36

func SolveCaptcha(svgCaptcha string) string {
	if parsedModel == nil {
		parsedModel = make(map[string]string)
		jsonBytes, _ := base64.StdEncoding.DecodeString(MODEL)
		json.Unmarshal(jsonBytes, &parsedModel)
	}

	getD := regexp.MustCompile(`d="([\w\.\- ]+)"`)
	paths := strings.Split(svgCaptcha, "<path")
	paths = paths[1:]

	var noStrokePaths []string
	for _, path := range paths {
		if !strings.Contains(path, "stroke") {
			noStrokePaths = append(noStrokePaths, path)
		}
	}

	var vals []int
	for _, path := range noStrokePaths {
		d := getD.FindStringSubmatch(path)[1]
		d = strings.Split(d, ".")[0]
		d = strings.ReplaceAll(d, "M", "")
		val, _ := strconv.Atoi(d)
		vals = append(vals, val)
	}

	sortedVals := make([]int, len(vals))
	copy(sortedVals, vals)
	sort.Ints(sortedVals)

	re := regexp.MustCompile(`[\d.\s]*`)
	solution := make([]string, LENGTH)
	for i, path := range noStrokePaths {
		d := getD.FindStringSubmatch(path)[1]
		pattern := re.ReplaceAllString(d, "")
		val, exist := parsedModel[pattern]
		if exist {
			idx := getIndex(sortedVals, vals[i])
			solution[idx] = val
		} else {
			return ""
		}
	}

	return strings.Join(solution, "")
}
